{
  "_args": [
    [
      {
        "raw": "ngx-infinite-scroll",
        "scope": null,
        "escapedName": "ngx-infinite-scroll",
        "name": "ngx-infinite-scroll",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/home/ndennis/git/DCGAutoA/dcg-auto"
    ]
  ],
  "_from": "ngx-infinite-scroll@latest",
  "_id": "ngx-infinite-scroll@0.5.1",
  "_inCache": true,
  "_location": "/ngx-infinite-scroll",
  "_nodeVersion": "6.9.1",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/ngx-infinite-scroll-0.5.1.tgz_1493134139702_0.4735423824749887"
  },
  "_npmUser": {
    "name": "orizens",
    "email": "farhioren@gmail.com"
  },
  "_npmVersion": "3.10.8",
  "_phantomChildren": {},
  "_requested": {
    "raw": "ngx-infinite-scroll",
    "scope": null,
    "escapedName": "ngx-infinite-scroll",
    "name": "ngx-infinite-scroll",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/ngx-infinite-scroll/-/ngx-infinite-scroll-0.5.1.tgz",
  "_shasum": "dd9452c602ff7c3222f0ca168481aa14140286b7",
  "_shrinkwrap": null,
  "_spec": "ngx-infinite-scroll",
  "_where": "/home/ndennis/git/DCGAutoA/dcg-auto",
  "author": {
    "name": "Oren Farhi",
    "url": "orizens.com"
  },
  "bugs": {
    "url": "https://github.com/orizens/ngx-infinite-scroll/issues"
  },
  "dependencies": {},
  "description": "An infinite scroll directive for Angular compatible with AoT compilation and Tree shaking",
  "devDependencies": {
    "@angular/animations": "^4.0.0",
    "@angular/common": "^4.0.0",
    "@angular/compiler": "^4.0.0",
    "@angular/compiler-cli": "^4.0.0",
    "@angular/core": "^4.0.0",
    "@angular/platform-browser": "^4.0.0",
    "@angular/platform-browser-dynamic": "^4.0.0",
    "@angular/platform-server": "^4.0.0",
    "@types/jasmine": "2.5.46",
    "@types/node": "7.0.10",
    "chalk": "1.1.3",
    "codelyzer": "3.0.0-beta.4",
    "compodoc": "0.0.41",
    "core-js": "2.4.1",
    "jasmine-core": "2.5.2",
    "karma": "1.5.0",
    "karma-chrome-launcher": "2.0.0",
    "karma-jasmine": "1.1.0",
    "karma-sourcemap-loader": "0.3.7",
    "karma-spec-reporter": "0.0.30",
    "karma-webpack": "2.0.3",
    "reflect-metadata": "0.1.10",
    "rollup": "0.41.6",
    "rxjs": "5.2.0",
    "shelljs": "0.7.7",
    "sorcery": "0.10.0",
    "ts-helpers": "1.1.2",
    "ts-loader": "2.0.3",
    "tslint": "4.5.1",
    "typescript": "^2.1.5",
    "uglify-js": "2.8.15",
    "webpack": "2.3.1",
    "yargs": "7.0.2",
    "zone.js": "0.8.5"
  },
  "directories": {},
  "dist": {
    "shasum": "dd9452c602ff7c3222f0ca168481aa14140286b7",
    "tarball": "https://registry.npmjs.org/ngx-infinite-scroll/-/ngx-infinite-scroll-0.5.1.tgz"
  },
  "es2015": "./modules/ngx-infinite-scroll.js",
  "homepage": "https://github.com/orizens/ngx-infinite-scroll",
  "keywords": [
    "angular",
    "javascript",
    "typescript"
  ],
  "license": "MIT",
  "main": "./bundles/ngx-infinite-scroll.umd.js",
  "maintainers": [
    {
      "name": "orizens",
      "email": "farhioren@gmail.com"
    }
  ],
  "module": "./modules/ngx-infinite-scroll.es5.js",
  "name": "ngx-infinite-scroll",
  "optionalDependencies": {},
  "peerDependencies": {
    "@angular/common": ">= 4.0.0",
    "@angular/core": ">= 4.0.0"
  },
  "readme": "[![Build Status](https://travis-ci.org/orizens/ngx-infinite-scroll.svg?branch=master)](https://travis-ci.org/orizens/ngx-infinite-scroll)\n\n# Angular Infinite Scroll\nInspired by [ng-infinite-scroll](https://github.com/sroze/ngInfiniteScroll) directive for angular (> 2, 4).\n\n## Angular Support\nSupports Angular **> 4**  \nFor Angular version **<= 2.3.1**, you can use ```npm i angular2-infinite-scroll``` (latest version is 0.3.42) - please notice **the angular2-infinite-scroll** package is deprecated\n\n## Angular Consulting Services\nI'm a Senior Javascript Engineer & A Front End Consultant at [Orizens](http://orizens.com).\nMy services include:  \n- consulting to companies and startups on how to approach code in their projects and keep it maintainable.  \n- I provide project bootstrapping and development - while afterwards, I integrate it on site and guide the team on it.  \n\n[Contact Me Here](http://orizens.com/contact)\n\n## Installation\n```\nnpm install ngx-infinite-scroll --save\n```\n\n## Supported API\nCurrently supported attributes:\n* **infiniteScrollDistance**<_number_> - (optional, default: **2**) - should get a number, the number of viewport lengths from the bottom of the page at which the event will be triggered.\n* **infiniteScrollUpDistance**<_number_> - (optional, default: **1.5**) - should get a number\n* **infiniteScrollThrottle**<_number_> - (optional, default: **300**) - should get a number of **milliseconds** for throttle. The event will be triggered this many milliseconds after the user *stops* scrolling.\n* **infiniteScrollContainer**<_string|HTMLElement_> - (optional, default: null) - should get a html element or css selector for a scrollable element; window or current element will be used if this attribute is empty.\n* **scrolled**<_function_> - this will callback if the distance threshold has been reached on a scroll down.\n* **scrolledUp**<_function_> - (event: InfiniteScrollEvent) - this will callback if the distance threshold has been reached on a scroll up.\n* **scrollWindow**<_boolean_> - (optional, default: **true**) - listens to the window scroll instead of the actual element scroll. this allows to invoke a callback function in the scope of the element while listenning to the window scroll.\n* **immediateCheck**<_boolean_> - (optional, default: **false**) - invokes the handler immediately to check if a scroll event has been already triggred when the page has been loaded (i.e. - when you refresh a page that has been scrolled).\n* **infiniteScrollDisabled**<_boolean_> - (optional, default: **false**) - doesn't invoke the handler if set to true\n\n## Behavior\nBy default, the directive listens to the **window scroll** event and invoked the callback.  \n**To trigger the callback when the actual element is scrolled**, these settings should be configured:\n* [scrollWindow]=\"false\"\n* set an explict css \"height\" value to the element\n\n## DEMO\n- [**Default Scroll** By Window - plunkr](https://plnkr.co/edit/DrEDetYnZkFxR7OWWrxS?p=preview) \n- [Scroll On a **\"Modal\"** - plunkr](https://plnkr.co/edit/QnQOwE9SEapwJCCFII3L?p=preview)\n\n## Usage\nFirst, import the InfiniteScrollModule to your module:\n\n```typescript\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { InfiniteScrollModule } from 'ngx-infinite-scroll';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { AppComponent } from './app';\n\n@NgModule({\n  imports:[ BrowserModule, InfiniteScrollModule ],\n  declarations: [ AppComponent, ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\nplatformBrowserDynamic().bootstrapModule(AppModule);\n```\n\nIn this example, the **onScroll** callback will be invoked when the window is scrolled down:\n\n```typescript\nimport { Component } from '@angular/core';\n\n@Component({\n\tselector: 'app',\n\ttemplate: `\n\t\t<div class=\"search-results\"\n\t\t    infiniteScroll\n\t\t    [infiniteScrollDistance]=\"2\"\n\t\t    [infiniteScrollThrottle]=\"300\"\n\t\t    (scrolled)=\"onScroll()\">\n\t\t</div>\n\t`\n})\nexport class AppComponent {\n\tonScroll () {\n\t    console.log('scrolled!!')\n\t}\n}\n```\nin this example, whenever the \"search-results\" is scrolled, the callback will be invoked:\n\n```typescript\nimport { Component } from '@angular/core';\n\n@Component({\n\tselector: 'app',\n\tstyles: [\n\t\t`.search-results {\n\t\t\theight: 20rem;\n\t\t\toverflow: scroll;\n\t\t}`\n\t],\n\ttemplate: `\n\t\t<div class=\"search-results\"\n\t\t    infiniteScroll\n\t\t    [infiniteScrollDistance]=\"2\"\n\t\t    [infiniteScrollThrottle]=\"500\"\n\t\t    (scrolled)=\"onScroll()\"\n\t\t    [scrollWindow]=\"false\">\n\t\t</div>\n\t`\n})\nexport class AppComponent {\n\tonScroll () {\n\t    console.log('scrolled!!')\n\t}\n}\n```\n\nIn this example, the **onScrollDown** callback will be invoked when the window is scrolled down and the **onScrollUp** callback will be invoked when the window is scrolled up:\n\n```typescript\nimport { Component } from '@angular/core';\nimport { InfiniteScroll } from 'ngx-infinite-scroll';\n\n@Component({\n\tselector: 'app',\n\tdirectives: [ InfiniteScroll ],\n\ttemplate: `\n\t\t<div class=\"search-results\"\n\t\t    infiniteScroll\n\t\t    [infiniteScrollDistance]=\"2\"\n\t\t    [infiniteScrollUpDistance]=\"1.5\"\n\t\t    [infiniteScrollThrottle]=\"500\"\n\t\t    (scrolled)=\"onScrollDown()\"\n\t\t    (scrolledUp)=\"onScrollUp()\">\n\t\t</div>\n\t`\n})\nexport class AppComponent {\n\tonScrollDown () {\n\t    console.log('scrolled down!!')\n\t}\n\n\tonScrollUp () {\n    \tconsole.log('scrolled up!!')\n    }\n}\n```\n\n# Showcase Examples\n* [Echoes Player - Developed with Angular, angular-cli and ngrx](http://orizens.github.io/echoes-player) ([github repo for echoes player](http://github.com/orizens/echoes-player))\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/orizens/ngx-infinite-scroll.git"
  },
  "scripts": {
    "build": "node build.js",
    "compodoc": "compodoc -p tsconfig.json",
    "compodoc-serve": "compodoc -s",
    "pack-lib": "npm pack ./dist",
    "publish-lib": "npm publish ./dist",
    "publish:beta": "npm publish --tag beta ./dist",
    "test": "karma start",
    "transpile": "ngc -p ./tsconfig.json"
  },
  "typings": "./index.d.ts",
  "version": "0.5.1"
}
